Playing around with and trying to re-implement an old "blog entry":http://java.dzone.com/articles/real-world-scala-managing-cros of Jonas Boner.

h1. AspectJ Load Time Weaving

Some resources:

* "Configuration Load-Time Weaving":http://eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html
* "Annotation Based Aspects":http://www.eclipse.org/aspectj/doc/next/adk15notebook/ataspectj.html

to enable load time weaving with maven surefire plugin use the following:

<pre>
<plugin>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
        <testFailureIgnore>true</testFailureIgnore>
        <forkMode>once</forkMode>
        <argLine>
            -javaagent:${user.home}/.m2/repository/org/aspectj/aspectjweaver/${aj.version}/aspectjweaver-${aj.version}.jar
        </argLine>
        <systemProperties>
            <property>
                <name>aj.weaving.verbose</name>
                <value>true</value>
            </property>
        </systemProperties>
    </configuration>
</plugin>
</pre>

h1. Aspects with Stackable Traits (current look)

h2. Around Interception

<pre>
"enable Around interception" in {

      val aspect = new Aspect("execution(* *.bar(..))")
              with LoggingInterceptor
              with TransactionInterceptor

      val foo = aspect.create[Foo](new FooImpl)

      foo.foo("foo")
      foo.bar("bar")

    }
</pre>

h2. Before Interception

<pre>
    "enable Before interception" in {

      val aspect = new Aspect("execution(* *.bar(..))")
              with InterceptBefore

      val foo = aspect.create[Foo](new FooImpl)

      foo.foo("foo")
      foo.bar("bar")
    }
</pre>

h2. After Interception

<pre>
    "enable After interception" in {
      val aspect = new Aspect("execution(* *.bar(..))")
              with InterceptAfter

      val foo = aspect.create[Foo](new FooImpl)

      foo.foo("foo")
      foo.bar("bar")
    }
</pre>